(window.webpackJsonp=window.webpackJsonp||[]).push([[81],{126:function(e,t,n){"use strict";n.r(t);var s=function(){var e=this,t=e.$createElement,n=e._self._c||t;return n("section",[n("h3",[e._v("Events")]),e._v(" "),n("section",[n("h4",[e._v("Listening to Events")]),e._v(" "),e._m(0),e._v(" "),e._m(1),e._v(" "),e._m(2),e._v(" "),n("div",{staticClass:"my-demo"},[n("button",{on:{click:function(t){e.counter+=1}}},[e._v("Add 1")]),e._v(" "),n("p",[e._v("The button above has been clicked "+e._s(e.counter)+" times.")])])]),e._v(" "),n("section",[n("h4",[e._v("Method Event Handlers")]),e._v(" "),e._m(3),e._v(" "),e._m(4),e._v(" "),e._m(5),e._v(" "),n("div",{staticClass:"my-demo"},[n("button",{on:{click:e.greet}},[e._v("Greet")])])]),e._v(" "),n("section",[n("h4",[e._v("Method in Inline Handlers")]),e._v(" "),e._m(6),e._v(" "),e._m(7),e._v(" "),e._m(8),e._v(" "),n("div",{staticClass:"my-demo"},[n("input",{directives:[{name:"model",rawName:"v-model",value:e.msg,expression:"msg"}],domProps:{value:e.msg},on:{input:function(t){t.target.composing||(e.msg=t.target.value)}}}),e._v(" "),n("button",{on:{click:function(t){return e.say(e.msg)}}},[e._v("Say")])]),e._v(" "),e._m(9),e._v(" "),e._m(10),e._v(" "),n("div",{staticClass:"my-demo"},[n("input",{directives:[{name:"model",rawName:"v-model",value:e.message,expression:"message"}],domProps:{value:e.message},on:{input:function(t){t.target.composing||(e.message=t.target.value)}}}),e._v(" "),n("button",{on:{click:function(t){return e.warn(e.message,t)}}},[e._v("Warn")])])]),e._v(" "),e._m(11),e._v(" "),e._m(12),e._v(" "),e._m(13)])};s._withStripped=!0;var i={data:function(){return{counter:0,name:"Vue.js",msg:"Something",message:"Form cannot be submitted yet."}},methods:{greet:function(e){alert("Hello ".concat(this.name,"!")),e&&alert(e.target.tagName)},say:function(e){alert(e)},warn:function(e,t){t&&t.preventDefault(),alert(e)}}},o=n(0),a=Object(o.a)(i,s,[function(){var e=this.$createElement,t=this._self._c||e;return t("p",[this._v("We can use the "),t("code",[this._v("v-on")]),this._v(" directive to listen to DOM events and run some JavaScript when they're triggered.")])},function(){var e=this.$createElement,t=this._self._c||e;return t("pre",[t("code",{staticClass:"my-js"},[this._v('\n      <button @click="counter += 1">Add 1</button>\n      <p>The button above has been clicked { counter } times.</p>\n    ')])])},function(){var e=this.$createElement,t=this._self._c||e;return t("pre",[t("code",{staticClass:"my-js"},[this._v("\n      data: {\n        counter: 0\n      }\n    ")])])},function(){var e=this.$createElement,t=this._self._c||e;return t("p",[this._v("The logic for many event handlers will be more complex though, so "),t("code",[t("a",{staticClass:"vue-api"},[this._v("v-on")])]),this._v(" can also accept the name of a method defined in "),t("code",[t("a",{staticClass:"vue-api"},[this._v("methods")])]),this._v(" property of Vue instance you'd like to call.")])},function(){var e=this.$createElement,t=this._self._c||e;return t("pre",[t("code",{staticClass:"my-html"},[this._v('\n      <button @click="greet">Greet</button>\n    ')])])},function(){var e=this.$createElement,t=this._self._c||e;return t("pre",[t("code",{staticClass:"my-js"},[this._v("\n      data: {\n        name: 'Vue.js'\n      },\n      methods: {\n        greet(event) {\n          alert(`Hello ${this.name}!`)\n          // `event` is the native DOM event\n          if (event) {\n            alert(event.target.tagName)\n          }\n        }\n      }\n    ")])])},function(){var e=this.$createElement,t=this._self._c||e;return t("p",[this._v("Instead of binding directly to a method name, we can also use methods in an inline JavaScript statement. Sometimes we also need to access the original DOM event in an inline statement handler. You can pass it into a method using the special "),t("code",[this._v("$event")]),this._v(" variable:")])},function(){var e=this.$createElement,t=this._self._c||e;return t("pre",[t("code",{staticClass:"my-html"},[this._v('\n      <input v-model="msg">\n      <button @click="say(msg)">Say</button>\n    ')])])},function(){var e=this.$createElement,t=this._self._c||e;return t("pre",[t("code",{staticClass:"my-js"},[this._v("\n      methods: {\n        say(message) {\n          alert(message)\n        }\n      }\n    ")])])},function(){var e=this.$createElement,t=this._self._c||e;return t("pre",[t("code",{staticClass:"my-html"},[this._v('\n      <input v-model="message">\n      <button @click="warn(message, $event)">Warn</button>\n    ')])])},function(){var e=this.$createElement,t=this._self._c||e;return t("pre",[t("code",{staticClass:"my-js"},[this._v("\n      data: {\n        message: 'Vue.js'\n      },\n      methods: {\n        warn(message, event) {\n          // now we have access to the native event\n          if (event) {\n            event.preventDefault()\n          }\n          alert(message)\n        }\n      }\n    ")])])},function(){var e=this,t=e.$createElement,n=e._self._c||t;return n("section",[n("h4",[e._v("Event Modifiers")]),e._v(" "),n("p",[e._v("It is a very common need to call "),n("code",[e._v("event.preventDefault()")]),e._v(" or "),n("code",[e._v("event.stopPropagation()")]),e._v(" inside event handlers. Although we can do this easily inside methods, it would be better if the methods can be purely about data logic rather than having to deal with DOM event details.")]),e._v(" "),n("p",[e._v("To address this problem, Vue provides "),n("b",[e._v("event modifiers")]),e._v(" for "),n("code",[e._v("v-on")]),e._v(". Recall that modifiers are directive postfixes denoted by a dot.")]),e._v(" "),n("ul",[n("li",[n("code",[e._v(".stop")])]),e._v(" "),n("li",[n("code",[e._v(".prevent")])]),e._v(" "),n("li",[n("code",[e._v(".capture")])]),e._v(" "),n("li",[n("code",[e._v(".self")])]),e._v(" "),n("li",[n("code",[e._v(".once")])]),e._v(" "),n("li",[n("code",[e._v(".passive")])])]),e._v(" "),n("pre",[n("code",{staticClass:"my-html"},[e._v('\n      \x3c!-- the click event\'s propagation will be stopped --\x3e\n      <a @click.stop="doThis"></a>\n      \n      \x3c!-- the submit event will no longer reload the page --\x3e\n      <form @submit.prevent="onSubmit"></form>\n      \n      \x3c!-- modifiers can be chained --\x3e\n      <a @click.stop.prevent="doThat"></a>\n      \n      \x3c!-- just the modifier --\x3e\n      <form @submit.prevent></form>\n      \n      \x3c!-- use capture mode when adding the event listener --\x3e\n      \x3c!-- i.e. an event targeting an inner element is handled here before being handled by that element --\x3e\n      <div @click.capture="doThis">...</div>\n      \n      \x3c!-- only trigger handler if event.target is the element itself --\x3e\n      \x3c!-- i.e. not from a child element --\x3e\n      <div @click.self="doThat">...</div>\n      \n      \x3c!-- the click event will be triggered at most once --\x3e\n      <a @click.once="doThis"></a>\n    ')])])])},function(){var e=this,t=e.$createElement,n=e._self._c||t;return n("section",[n("h4",[e._v("Key Modifiers")]),e._v(" "),n("p",[e._v("When listening for keyboard events, we often need to check for specific keys. Vue allows adding key modifiers for "),n("code",[e._v("v-on")]),e._v(" when listening for key events:")]),e._v(" "),n("pre",[n("code",{staticClass:"my-html"},[e._v('\n      \x3c!-- only call `vm.submit()` when the `key` is `Enter` --\x3e\n      <input @keyup.enter="submit">\n    ')])]),e._v(" "),n("p",[e._v("You can directly use any valid key names exposed via "),n("a",{attrs:{href:"https://developer.mozilla.org/en-US/docs/Web/API/KeyboardEvent/key/Key_Values"}},[n("code",[e._v("KeyboardEvent.key")])]),e._v(" as modifiers by converting them to kebab-case.")]),e._v(" "),n("pre",[n("code",{staticClass:"my-html"},[e._v('\n      <input @keyup.page-down="onPageDown">\n    ')])]),e._v(" "),n("p",[e._v("In the above example, the handler will only be called if "),n("code",[e._v("$event.key")]),e._v(" is equal to "),n("code",[e._v("'PageDown'")]),e._v(".")])])},function(){var e=this,t=e.$createElement,n=e._self._c||t;return n("section",[n("h4",[e._v("System Modifier Keys")]),e._v(" "),n("p",[e._v("You can use the following modifiers to trigger mouse or keyboard event listeners only when the corresponding modifier key is pressed:")]),e._v(" "),n("ul",[n("li",[n("code",[e._v(".ctrl")])]),e._v(" "),n("li",[n("code",[e._v(".alt")])]),e._v(" "),n("li",[n("code",[e._v(".shift")])]),e._v(" "),n("li",[n("code",[e._v(".meta")])])]),e._v(" "),n("p",[e._v('Note: On Macintosh keyboards, meta is the command key (⌘). On Windows keyboards, meta is the Windows key (⊞). On Sun Microsystems keyboards, meta is marked as a solid diamond (◆). On certain keyboards, specifically MIT and Lisp machine keyboards and successors, such as the Knight keyboard, space-cadet keyboard, meta is labeled "META". On Symbolics keyboards, meta is labeled "META" or "Meta".')]),e._v(" "),n("pre",[n("code",{staticClass:"my-html"},[e._v('\n      \x3c!-- Alt + C --\x3e\n      <input @keyup.alt.67="clear">\n      \x3c!-- Ctrl + Click --\x3e\n      <div @click.ctrl="doSomething">Do something</div>\n    ')])]),e._v(" "),n("p",[e._v("Note that modifier keys are different from regular keys and when used with "),n("code",[e._v("keyup")]),e._v(" events, they have to be pressed when the event is emitted. In other words, "),n("code",[e._v("keyup.ctrl")]),e._v(" will only trigger if you release a key while holding down "),n("code",[e._v("ctrl")]),e._v(". It won't trigger if you release the "),n("code",[e._v("ctrl")]),e._v(" key alone. If you do want such behaviour, use the "),n("code",[e._v("keyCode")]),e._v(" for "),n("code",[e._v("ctrl")]),e._v(" instead: "),n("code",[e._v("keyup.17")]),e._v(".")]),e._v(" "),n("section",[n("h5",[n("code",[e._v(".exact")]),e._v(" Modifier")]),e._v(" "),n("p",[e._v("The "),n("code",[e._v(".exact")]),e._v(" modifier allows control of the exact combination of system modifiers needed to trigger an event.")]),e._v(" "),n("pre",[n("code",{staticClass:"my-html"},[e._v('\n        \x3c!-- this will fire even if Alt or Shift is also pressed --\x3e\n        <button @click.ctrl="onClick">A</button>\n        \x3c!-- this will only fire when Ctrl and no other keys are pressed --\x3e\n        <button @click.ctrl.exact="onCtrlClick">A</button>\n        \x3c!-- this will only fire when no system modifiers are pressed --\x3e\n        <button @click.exact="onClick">A</button>\n      ')])])]),e._v(" "),n("section",[n("h5",[e._v("Mouse Button Modifiers")]),e._v(" "),n("ul",[n("li",[n("code",[e._v(".left")])]),e._v(" "),n("li",[n("code",[e._v(".right")])]),e._v(" "),n("li",[n("code",[e._v(".middle")])])]),e._v(" "),n("p",[e._v("These modifiers restrict the handler to events triggered by a specific mouse button.")])])])}],!1,null,null,null);a.options.__file="docs/web/vue/guide/Events.vue";t.default=a.exports}}]);