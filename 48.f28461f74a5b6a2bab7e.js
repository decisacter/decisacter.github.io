(window.webpackJsonp=window.webpackJsonp||[]).push([[48],{160:function(e,n,s){"use strict";s.r(n);var a=function(){var e=this.$createElement;this._self._c;return this._m(0)};a._withStripped=!0;var t=s(0),i=Object(t.a)({},a,[function(){var e=this,n=e.$createElement,s=e._self._c||n;return s("section",[s("h1",[e._v("Functions")]),e._v(" "),s("p",[e._v("Stylus features powerful in-language function definitions. Function definitions appear identical to mixins; however, functions may return a value.")]),e._v(" "),s("section",[s("h2",[e._v("Return Values")]),e._v(" "),s("p",[e._v("Let's try a trivial example: creating a function that adds two numbers.")]),e._v(" "),s("pre",[s("code",{staticClass:"my-stylus"},[e._v("\n      add(a, b)\n        a + b\n    ")])]),e._v(" "),s("p",[e._v("We can then use this function in conditions, in property values, etc.")]),e._v(" "),s("pre",[s("code",{staticClass:"my-stylus"},[e._v("\n      body \n        padding add(10px, 5)\n    ")])]),e._v(" "),s("p",[e._v("Rendering:")]),e._v(" "),s("pre",[s("code",{staticClass:"my-css"},[e._v("\n      body {\n       padding: 15px;\n     }\n    ")])])]),e._v(" "),s("section",[s("h2",[e._v("Argument Defaults")]),e._v(" "),s("p",[e._v("Optional arguments may default to a given expression. With Stylus we may even default arguments to earlier arguments!")]),e._v(" "),s("p",[e._v("For example:")]),e._v(" "),s("pre",[s("code",{staticClass:"my-stylus"},[e._v("\n      add(a, b = a)\n        a + b\n    \n      add(10, 5)\n      // => 15\n      \n      add(10)\n      // => 20\n    ")])]),e._v(" "),s("p",[s("b",[e._v("Note:")]),e._v(" Since argument defaults are assignments, we can also use function calls for defaults:")]),e._v(" "),s("pre",[s("code",{staticClass:"my-stylus"},[e._v("\n      add(a, b = unit(a, px))\n        a + b\n    ")])])]),e._v(" "),s("section",[s("h2",[e._v("Named Parameters")]),e._v(" "),s("p",[e._v("Functions accept named parameters. This frees you from remembering the order of parameters, or simply improves the readability of your code.")]),e._v(" "),s("p",[e._v("For example:")]),e._v(" "),s("pre",[s("code",{staticClass:"my-stylus"},[e._v("\n      subtract(a, b)\n        a - b\n    \n      subtract(b: 10, a: 25)\n    ")])])]),e._v(" "),s("section",[s("h2",[e._v("Function Bodies")]),e._v(" "),s("p",[e._v("We can take our simple "),s("code",[e._v("add()")]),e._v(" function further. Let's casting all units passed as "),s("code",[e._v("px")]),e._v(" via the "),s("code",[e._v("unit()")]),e._v(" built-in. It reassigns each argument, and provides a unit-type string (or identifier), which ignores unit conversion.")]),e._v(" "),s("pre",[s("code",{staticClass:"my-stylus"},[e._v("\n      add(a, b = a)\n        a = unit(a, px)\n        b = unit(b, px)\n        a + b\n    \n      add(15%, 10deg)\n      // => 25\n    ")])])]),e._v(" "),s("section",[s("h2",[e._v("Multiple Return Values")]),e._v(" "),s("p",[e._v("Stylus functions can return several values-just as you can assign several values to a variable.")]),e._v(" "),s("p",[e._v("For example, the following is a valid assignment:")]),e._v(" "),s("pre",[s("code",{staticClass:"my-stylus"},[e._v("\n      sizes = 15px 10px\n     \n      sizes[0]\n      // => 15px \n    ")])]),e._v(" "),s("p",[e._v("Similarly, we may return several values:")]),e._v(" "),s("pre",[s("code",{staticClass:"my-stylus"},[e._v("\n      sizes()\n        15px 10px\n    \n      sizes()[0]\n        // => 15px\n    ")])]),e._v(" "),s("p",[e._v("One slight exception is when return values are identifiers. For example, the following looks like a property assignment to Stylus (since no operators are present):")]),e._v(" "),s("pre",[s("code",{staticClass:"my-stylus"},[e._v("\n      swap(a, b)\n        b a\n    ")])]),e._v(" "),s("p",[e._v("To disambiguate, we can either wrap with parentheses, or use the "),s("code",[e._v("return")]),e._v(" keyword:")]),e._v(" "),s("pre",[s("code",{staticClass:"my-stylus"},[e._v("\n      swap(a, b)\n        (b a)\n    \n      swap(a, b)\n        return b a\n    ")])])]),e._v(" "),s("section",[s("h2",[e._v("Conditionals")]),e._v(" "),s("p",[e._v("Let's say we want to create a function named "),s("code",[e._v("stringish()")]),e._v(" to determine whether the argument can be transformed to a string. We check if "),s("code",[e._v("val")]),e._v(" is a string, or an ident (which is string-like). Because undefined identifiers yield themselves as the value, we may compare them to themselves as shown below (where "),s("code",[e._v("yes")]),e._v(" and "),s("code",[e._v("no")]),e._v(" are used in place of "),s("code",[e._v("true")]),e._v(" and "),s("code",[e._v("false")]),e._v("):")]),e._v(" "),s("pre",[s("code",{staticClass:"my-stylus"},[e._v("\n      stringish(val)\n        if val is a 'string' or val is a 'ident'\n          yes\n        else\n          no\n    ")])]),e._v(" "),s("p",[e._v("Usage:")]),e._v(" "),s("pre",[s("code",{staticClass:"my-stylus"},[e._v("\n      stringish('yay') == yes\n      // => true\n       \n      stringish(yay) == yes\n      // => true\n       \n      stringish(0) == no\n      // => true\n    ")])]),e._v(" "),s("p",[s("b",[e._v("note")]),e._v(": "),s("code",[e._v("yes")]),e._v(" and "),s("code",[e._v("no")]),e._v(" are not boolean literals. They are simply undefined identifiers in this case.")]),e._v(" "),s("p",[e._v("Another example:")]),e._v(" "),s("pre",[s("code",{staticClass:"my-stylus"},[e._v("\n      compare(a, b)\n        if a > b\n          higher\n        else if a < b\n          lower\n        else\n          equal\n    ")])]),e._v(" "),s("p",[e._v("Usage:")]),e._v(" "),s("pre",[s("code",{staticClass:"my-stylus"},[e._v("\n      compare(5, 2)\n      // => higher\n      \n      compare(1, 5)\n      // => lower\n      \n      compare(10, 10)\n      // => equal\n    ")])])]),e._v(" "),s("section",[s("h2",[e._v("Aliasing")]),e._v(" "),s("p",[e._v("To alias a function, simply assign a function's name to a new identifier. For example, our "),s("code",[e._v("add()")]),e._v(" function could be aliased as "),s("code",[e._v("plus()")]),e._v(", like so:")]),e._v(" "),s("pre",[s("code",{staticClass:"my-stylus"},[e._v("\n      plus = add\n      \n      plus(1, 2)\n      // => 3\n    ")])])]),e._v(" "),s("section",[s("h2",[e._v("Variable Functions")]),e._v(" "),s("p",[e._v('In the same way that we can "alias" a function, we can pass a function as well. Here, our '),s("code",[e._v("invoke()")]),e._v(" function accepts a function, so we can pass it "),s("code",[e._v("add()")]),e._v(" or "),s("code",[e._v("sub()")]),e._v(".")]),e._v(" "),s("pre",[s("code",{staticClass:"my-stylus"},[e._v("\n      add(a, b)\n        a + b\n    \n      sub(a, b)\n        a - b\n      \n      invoke(a, b, fn)\n        fn(a, b)\n    \n      body\n        padding invoke(5, 10, add)\n        padding invoke(5, 10, sub)\n    ")])]),e._v(" "),s("p",[e._v("Yielding:")]),e._v(" "),s("pre",[s("code",{staticClass:"my-css"},[e._v("\n      body {\n        padding: 15;\n        padding: -5;\n      }\n    ")])])]),e._v(" "),s("section",[s("h2",[e._v("Anonymous functions")]),e._v(" "),s("p",[e._v("You can use anonymous functions where needed using "),s("code",[e._v("@(){}")]),e._v(" syntax. Here is how you could use it to create a custom "),s("code",[e._v("sort()")]),e._v(" function:")]),e._v(" "),s("pre",[s("code",{staticClass:"my-stylus"},[e._v("\n      sort(list, fn = null)\n      // default sort function\n      if fn == null\n        fn = @(a, b) {\n          a > b\n        }\n    \n      // bubble sort\n      for $i in 1..length(list) - 1\n        for $j in 0..$i - 1\n          if fn(list[$j], list[$i])\n            $temp = list[$i]\n            list[$i] = list[$j]\n            list[$j] = $temp\n      return list\n    \n      sort('e' 'c' 'f' 'a' 'b' 'd')\n      // => 'a' 'b' 'c' 'd' 'e' 'f'\n    \n      sort(5 3 6 1 2 4, @(a, b){\n        a > b\n      })\n      // => 6 5 4 3 2 1\n    ")])])]),e._v(" "),s("section",[s("h2",[e._v("arguments")]),e._v(" "),s("p",[e._v("The "),s("code",[e._v("arguments")]),e._v(" local is available to all function bodies, and contains all the arguments passed.")]),e._v(" "),s("p",[e._v("For example:")]),e._v(" "),s("pre",[s("code",{staticClass:"my-stylus"},[e._v("\n      sum()\n        n = 0\n        for num in arguments\n          n = n + num\n    \n      sum(1,2,3,4,5)\n      // => 15\n    ")])])]),e._v(" "),s("section",[s("h2",[e._v("Hash Example")]),e._v(" "),s("p",[e._v("Below we define the "),s("code",[e._v("get(hash, key)")]),e._v(" function, which returns the\n      value of "),s("code",[e._v("key")]),e._v(" (or "),s("code",[e._v("null")]),e._v("). We iterate each "),s("code",[e._v("pair")]),e._v(" in "),s("code",[e._v("hash")]),e._v(", returning the pair's second node when the first (the "),s("code",[e._v("key")]),e._v(") matches.")]),e._v(" "),s("pre",[s("code",{staticClass:"my-stylus"},[e._v("\n      get(hash, key)\n      return pair[1] if pair[0] == key for pair in hash\n    ")])]),e._v(" "),s("p",[e._v("As demonstrated below, in-language functions-paired with robust Stylus expressions-can provide great flexibility:")]),e._v(" "),s("pre",[s("code",{staticClass:"my-stylus"},[e._v("\n      hash = (one 1) (two 2) (three 3)\n      \n      get(hash, two)\n      // => 2\n    \n      get(hash, three)\n      // => 3\n    \n      get(hash, something)\n      // => null\n    ")])])])])}],!1,null,null,null);i.options.__file="docs/web/stylus/Functions.vue";n.default=i.exports}}]);