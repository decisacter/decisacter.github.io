(window.webpackJsonp=window.webpackJsonp||[]).push([[79],{124:function(e,t,i){"use strict";i.r(t);var s=function(){var e=this,t=e.$createElement,i=e._self._c||t;return i("section",[i("h3",[e._v("Conditional")]),e._v(" "),i("section",[i("h4",[e._v("v-if")]),e._v(" "),e._m(0),e._v(" "),e._m(1),e._v(" "),i("section",[i("h5",[e._v("Controlling Reusable Elements in template with key")]),e._v(" "),e._m(2),e._v(" "),e._m(3),e._v(" "),e._m(4),e._v(" "),e._m(5),e._v(" "),i("div",{staticClass:"my-demo"},["username"===e.loginType?[i("label",[e._v("Username")]),e._v(" "),i("input",{key:"username-input",attrs:{placeholder:"Enter your username"}})]:[i("label",[e._v("Email")]),e._v(" "),i("input",{key:"email-input",attrs:{placeholder:"Enter your email address"}})],e._v(" "),i("button",{on:{click:function(t){e.loginType="username"===e.loginType?"email":"username"}}},[e._v("Toggle Login Type")])],2)])])])};s._withStripped=!0;var n={data:function(){return{loginType:"username"}}},a=i(0),l=Object(a.a)(n,s,[function(){var e=this.$createElement,t=this._self._c||e;return t("p",[this._v("The directive "),t("code",[t("a",{staticClass:"vue-api"},[this._v("v-if")])]),this._v(' is used to conditionally render a block. The block will only be rendered if the directive\'s expression returns a truthy value. It is also possible to add an "else block" with '),t("code",[t("a",{staticClass:"vue-api"},[this._v("v-else")])]),this._v(" and "),t("code",[t("a",{staticClass:"vue-api"},[this._v("v-else-if")])]),this._v(":")])},function(){var e=this.$createElement,t=this._self._c||e;return t("pre",[t("code",{staticClass:"my-html"},[this._v('\n      <h1 v-if="awesome">Vue is awesome!</h1>         \n      <h1 v-else-if>Wait, what? </h1>\n      <h1 v-else>Oh no </h1>\n    ')])])},function(){var e=this,t=e.$createElement,i=e._self._c||t;return i("p",[e._v("Because "),i("code",[e._v("v-if")]),e._v(" is a directive, it has to be attached to a single element. But we can use "),i("code",[e._v("v-if")]),e._v(" on a "),i("code",[e._v("<template>")]),e._v(" element, which serves as an invisible wrapper. The final rendered result will not include the "),i("code",[e._v("<template>")]),e._v(" element.")])},function(){var e=this.$createElement,t=this._self._c||e;return t("p",[this._v("Then switching the "),t("code",[this._v("loginType")]),this._v(" in the code above will not erase what the user has already entered. Since both templates use the same elements, the "),t("code",[this._v("<input>")]),this._v(" is not replaced - just its "),t("code",[this._v("placeholder")]),this._v(".")])},function(){var e=this.$createElement,t=this._self._c||e;return t("p",[this._v("This isn't always desirable though, so Vue offers a way for you to say, \"These two elements are completely separate - don't re-use them.\" Add a "),t("code",[t("a",{staticClass:"vue-api"},[this._v("key")])]),this._v(" attribute with unique values:")])},function(){var e=this.$createElement,t=this._self._c||e;return t("pre",[t("code",{staticClass:"my-html"},[this._v('\n        <template v-if="loginType === \'username\'">\n        <label>Username</label>\n        <input placeholder="Enter your username" key="username-input">\n        </template>\n        <template v-else>\n          <label>Email</label>\n          <input placeholder="Enter your email address" key="email-input">\n        </template>\n      ')])])}],!1,null,null,null);l.options.__file="docs/web/vue/guide/Conditional.vue";t.default=l.exports}}]);