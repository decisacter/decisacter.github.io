(window.webpackJsonp=window.webpackJsonp||[]).push([[47],{165:function(e,n,t){"use strict";t.r(n);var s=function(){var e=this.$createElement;this._self._c;return this._m(0)};s._withStripped=!0;var o=t(0),i=Object(o.a)({},s,[function(){var e=this,n=e.$createElement,t=e._self._c||n;return t("section",[t("h2",[e._v("@extend")]),e._v(" "),t("p",[e._v("The Stylus "),t("b",[e._v("@extend")]),e._v(" directive is inspired by (and essentially the same as) the SASS, with few subtle differences. This feature significantly simplifies maintenance of semantic rulesets that inherit from other semantic rulesets.")]),e._v(" "),t("section",[t("h3",[e._v('"Extending" with mixins')]),e._v(" "),t("p",[e._v('Although you can use mixins to achieve a similar effect, this can lead to duplicate CSS. A typical pattern is to define several classes as shown below, then combine them on the element such as "warning message".')]),e._v(" "),t("p",[e._v("While this technique works just fine, it's difficult to maintain.")]),e._v(" "),t("pre",[t("code",{staticClass:"my-stylus"},[e._v("\n      .message,\n      .warning {\n        padding: 10px;\n        border: 1px solid #eee;\n      }\n    \n      .warning {\n        color: #E2E21E;\n      }\n    ")])])]),e._v(" "),t("section",[t("h3",[e._v("Using "),t("b",[t("code",[e._v("@extend")])])]),e._v(" "),t("p",[e._v("To produce this same output with "),t("b",[t("code",[e._v("@extend")])]),e._v(", simply pass it the desired selector (note that "),t("code",[e._v("@extend")]),e._v(" and "),t("code",[e._v("@extends")]),e._v(" are equal, one is just an alias of another). Stylus will then append the "),t("code",[e._v(".warning")]),e._v(" selector to the existing "),t("code",[e._v(".message")]),e._v(" ruleset. The "),t("code",[e._v(".warning")]),e._v(" class then inherits properties from "),t("code",[e._v(".message")]),e._v(".")]),e._v(" "),t("pre",[t("code",{staticClass:"my-stylus"},[e._v("\n      .message {\n        padding: 10px;\n        border: 1px solid #eee;\n      }\n    \n      .warning {\n        @extend .message;\n        color: #E2E21E;\n      }\n    ")])]),e._v(" "),t("p",[e._v("Here's a more complex example, demonstrating how "),t("b",[t("code",[e._v("@extend")])]),e._v(" cascades:")]),e._v(" "),t("pre",[t("code",{staticClass:"my-stylus"},[e._v("\n      red = #E33E1E\n      yellow = #E2E21E\n    \n      .message\n        padding: 10px\n        font: 14px Helvetica\n        border: 1px solid #eee\n    \n      .warning\n        @extends .message\n        border-color: yellow\n        background: yellow + 70%\n    \n      .error\n        @extends .message\n        border-color: red\n        background: red + 70%\n    \n      .fatal\n        @extends .error\n        font-weight: bold\n        color: red\n    ")])]),e._v(" "),t("p",[e._v("Yielding the following CSS:")]),e._v(" "),t("pre",[t("code",{staticClass:"my-stylus"},[e._v("\n      .message,\n      .warning,\n      .error,\n      .fatal {\n        padding: 10px;\n        font: 14px Helvetica;\n        border: 1px solid #eee;\n      }\n      .warning {\n        border-color: #e2e21e;\n        background: #f6f6bc;\n      }\n      .error,\n      .fatal {\n        border-color: #e33e1e;\n        background: #f7c5bc;\n      }\n      .fatal {\n        font-weight: bold;\n        color: #e33e1e;\n      }\n    ")])]),e._v(" "),t("p",[e._v("Where Stylus currently differs from SASS is, SASS won't allow "),t("b",[t("code",[e._v("@extend")])]),e._v(" nested selectors:")]),e._v(" "),t("pre",[t("code",{staticClass:"my-stylus"},[e._v("\n    form\n     button\n       padding: 10px\n  \n    a.button\n      @extend form button \n    Syntax error: Can't extend form button: can't extend nested selectors\n            on line 6 of standard input\n      Use --trace for backtrace.\n    ")])]),e._v(" "),t("p",[e._v("With Stylus, as long as the selectors match, it works!")]),e._v(" "),t("pre",[t("code",{staticClass:"my-stylus"},[e._v("\n      form\n        input[type=text]\n          padding: 5px\n          border: 1px solid #eee\n          color: #ddd\n    \n      textarea\n        @extends form input[type=text]\n        padding: 10px\n    ")])]),e._v(" "),t("p",[e._v("Yielding:")]),e._v(" "),t("pre",[t("code",{staticClass:"my-stylus"},[e._v("\n      form input[type=text],\n      textarea {\n        padding: 5px;\n        border: 1px solid #eee;\n        color: #ddd;\n      }\n      textarea {\n        padding: 10px;\n      }\n    ")])])]),e._v(" "),t("section",[t("h3",[e._v("Extending multiple selectors")]),e._v(" "),t("p",[e._v("Stylus allows you to extend multiple selectors at once, just write them with the comma:")]),e._v(" "),t("pre",[t("code",{staticClass:"my-stylus"},[e._v("\n      .a\n        color: red\n    \n      .b\n        width: 100px\n      \n      .c\n        @extend .a, .b\n        height: 200px\n    ")])]),e._v(" "),t("p",[e._v("Yielding:")]),e._v(" "),t("pre",[t("code",{staticClass:"my-stylus"},[e._v("\n      .a,\n      .c {\n        color: #f00;\n      }\n      .b,\n      .c {\n        width: 100px;\n      }\n      .c {\n        height: 200px;\n      }\n    ")])])]),e._v(" "),t("section",[t("h3",[e._v("Extending placeholder selectors")]),e._v(" "),t("p",[e._v("Stylus has a feature similar to the one in "),t("a",{attrs:{href:"http://sass-lang.com/docs/yardoc/file.SASS_REFERENCE.html#placeholders"}},[e._v("Sass")]),e._v(" - placeholder selectors.")]),e._v(" "),t("p",[e._v("Those selectors should start with a "),t("code",[e._v("$")]),e._v(" symbol (for example, "),t("code",[e._v("$foo")]),e._v("), and are not yielded in the resulting CSS. But you can still extend them:")]),e._v(" "),t("pre",[t("code",{staticClass:"my-stylus"},[e._v("\n      $foo\n        color: #FFF\n    \n      $foo2\n        color: red\n      \n      .bar\n        background: #000\n        @extends $foo\n      \n      .baz\n        @extends $foo\n    ")])]),e._v(" "),t("p",[e._v("Yielding:")]),e._v(" "),t("pre",[t("code",{staticClass:"my-stylus"},[e._v("\n      .bar,\n      .baz {\n        color: #fff;\n      }\n      .bar {\n        background: #000;\n      }\n    ")])]),e._v(" "),t("p",[e._v("Note that if the selector is not extended, it won't be in the resulting CSS, so it's a powerful way to create a library of extendable code. While you can insert code through mixins, they would insert the same code every time you use them, while extending placeholders would give you compact output.")])]),e._v(" "),t("section",[t("h3",[e._v("Optional extending")]),e._v(" "),t("p",[e._v("Sometimes it might be usefull to be able to extend something that might exists or not depending on the context. You can suffix any selector by "),t("code",[e._v("!optional")]),e._v(" to achieve this:")]),e._v(" "),t("pre",[t("code",{staticClass:"my-stylus"},[e._v("\n      $specialDesign\n        color: #FFF\n    \n      .btn\n        @extend .design !optional, $specialDesign !optional\n    ")])]),e._v(" "),t("p",[e._v("Yielding:")]),e._v(" "),t("pre",[t("code",{staticClass:"my-stylus"},[e._v("\n      .btn {\n        color: #fff;\n      }\n    ")])])])])}],!1,null,null,null);i.options.__file="docs/web/stylus/Extend.vue";n.default=i.exports}}]);