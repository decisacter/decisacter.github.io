(window.webpackJsonp=window.webpackJsonp||[]).push([[20],{103:function(e,n,s){"use strict";var t=s(63);s.n(t).a},104:function(e,n,s){(n=s(13)(!1)).push([e.i,"",""]),e.exports=n},158:function(e,n,s){"use strict";s.r(n);var t=function(){var e=this.$createElement;this._self._c;return this._m(0)};t._withStripped=!0;s(103);var a=s(0),o=Object(a.a)({},t,[function(){var e=this,n=e.$createElement,s=e._self._c||n;return s("section",[s("h2",[e._v("Operators")]),e._v(" "),s("section",[s("h3",[e._v("Operator Precedence")]),e._v(" "),s("p",[e._v("Below is the operator precedence table, highest to lowest:")]),e._v(" "),s("pre",[s("code",{staticClass:"my-stylus"},[e._v("\n      .\n      []\n      ! ~ + -\n      is defined\n      ** * / %\n      + -\n      ... ..\n      <= >= < >\n      in\n      == is != is not isnt\n      is a\n      && and || or\n      ?:\n      = := ?= += -= *= /= %=\n      not\n      if unless\n    ")])])]),e._v(" "),s("section",[s("h3",[e._v("Unary Operators")]),e._v(" "),s("p",[e._v("The following unary operators are available, "),s("code",[e._v("!")]),e._v(", "),s("code",[e._v("not")]),e._v(", "),s("code",[e._v("-")]),e._v(", "),s("code",[e._v("+")]),e._v(", and "),s("code",[e._v("~")]),e._v(".")]),e._v(" "),s("pre",[s("code",{staticClass:"my-stylus"},[e._v("\n      !0\n      // => true\n      \n      !!0\n      // => false\n      \n      !1\n      // => false\n      \n      !!5px\n      // => true\n      \n      -5px\n      // => -5px\n      \n      --5px\n      // => 5px\n      \n      not true\n      // => false\n      \n      not not true\n      // => true\n    ")])]),e._v(" "),s("p",[e._v("The logical "),s("code",[e._v("not")]),e._v(" operator has low precedence, therefore the following example could be replaced with")]),e._v(" "),s("pre",[s("code",{staticClass:"my-stylus"},[e._v("\n      a = 0\n      b = 1\n      \n      !a and !b\n      // => false\n      // parsed as: (!a) and (!b)\n    ")])]),e._v(" "),s("p",[e._v("With:")]),e._v(" "),s("pre",[s("code",{staticClass:"my-stylus"},[e._v("\n      not a or b\n      // => false\n      // parsed as: not (a or b)\n    ")])])]),e._v(" "),s("section",[s("h3",[e._v("Binary Operators")])]),e._v(" "),s("section",[s("h3",[e._v("Subscript []")]),e._v(" "),s("p",[e._v("The subscript operator allows us to grab a value inside an expression via index (zero-based).\n      Negative index values starts with the last element in the expression.")]),e._v(" "),s("pre",[s("code",{staticClass:"my-stylus"},[e._v("\n      list = 1 2 3\n      list[0]\n      // => 1\n      \n      list[-1]\n      // => 3\n    ")])]),e._v(" "),s("p",[e._v("Parenthesized expressions may act as tuples (e.g. "),s("code",[e._v("(15px 5px)")]),e._v(", "),s("code",[e._v("(1 2 3)")]),e._v(").")]),e._v(" "),s("p",[e._v("Below is an example that uses tuples for error handling (and showcasing the versatility of this construct):")]),e._v(" "),s("pre",[s("code",{staticClass:"my-stylus"},[e._v("\n      add(a, b)\n        if a is a 'unit' and b is a 'unit'\n          a + b\n        else\n          (error 'a and b must be units!')\n      \n      body\n        padding add(1,'5')\n        // => padding: error \"a and b must be units\";\n        \n        padding add(1,'5')[0]\n        // => padding: error;\n        \n        padding add(1,'5')[0] == error\n        // => padding: true;\n      \n        padding add(1,'5')[1]\n        // => padding: \"a and b must be units\";\n    ")])]),e._v(" "),s("p",[e._v("Here's a more complex example. Now we're invoking the built-in "),s("code",[e._v("error()")]),e._v(" function with the return error message, whenever the ident (the first value) equals "),s("code",[e._v("error")]),e._v(".")]),e._v(" "),s("pre",[s("code",{staticClass:"my-stylus"},[e._v("\n      if (val = add(1,'5'))[0] == error\n        error(val[1])\n    ")])])]),e._v(" "),s("section",[s("h3",[e._v("Range .. ...")]),e._v(" "),s("p",[e._v("Both the inclusive ("),s("code",[e._v("..")]),e._v(") and exclusive ("),s("code",[e._v("...")]),e._v(") range operators are provided, expanding to expressions:")]),e._v(" "),s("pre",[s("code",{staticClass:"my-stylus"},[e._v("\n      1..5\n      // => 1 2 3 4 5\n      \n      1...5\n      // => 1 2 3 4\n      \n      5..1\n      // => 5 4 3 2 1\n    ")])])]),e._v(" "),s("section",[s("h3",[e._v("Additive: + -")]),e._v(" "),s("p",[e._v("Multiplicative and additive binary operators work as expected. Type conversion is applied within unit type classes, or default to the literal value. For example "),s("code",[e._v("5s - 2px")]),e._v(" results in "),s("code",[e._v("3s")]),e._v(".")]),e._v(" "),s("pre",[s("code",{staticClass:"my-stylus"},[e._v('\n      15px - 5px\n      // => 10px\n      \n      5 - 2\n      // => 3\n      \n      5in - 50mm\n      // => 3.031in\n      \n      5s - 1000ms\n      // => 4s\n      \n      20mm + 4in\n      // => 121.6mm\n      \n      "foo " + "bar"\n      // => "foo bar"\n      \n      "num " + 15\n      // => "num 15"\n    ')])])]),e._v(" "),s("section",[s("h3",[e._v("Multiplicative: / * %")]),e._v(" "),s("pre",[s("code",{staticClass:"my-stylus"},[e._v("\n      2000ms + (1s * 2)\n      // => 4000ms\n      \n      5s / 2\n      // => 2.5s\n      \n      4 % 2\n      // => 0\n    ")])]),e._v(" "),s("p",[e._v("When using "),s("code",[e._v("/")]),e._v(" within a property value, you "),s("b",[e._v("must")]),e._v(" wrap with parens. Otherwise the "),s("code",[e._v("/")]),e._v(" is taken literally (to support CSS "),s("code",[e._v("line-height")]),e._v("):")]),e._v(" "),s("pre",[s("code",{staticClass:"my-stylus"},[e._v("\n      font: 14px/1.5;\n    ")])]),e._v(" "),s("p",[e._v("But the following is evaluated as "),s("code",[e._v("14px")]),e._v(" รท "),s("code",[e._v("1.5")]),e._v(":")]),e._v(" "),s("pre",[s("code",{staticClass:"my-stylus"},[e._v("\n      font: (14px/1.5);\n    ")])]),e._v(" "),s("p",[e._v("This is "),s("i",[e._v("only")]),e._v(" required for the "),s("code",[e._v("/")]),e._v(" operator.")])]),e._v(" "),s("section",[s("h3",[e._v("Exponent: **")]),e._v(" "),s("p",[e._v("The Exponent operator:")]),e._v(" "),s("pre",[s("code",{staticClass:"my-stylus"},[e._v("\n      2 ** 8\n      // => 256\n    ")])])]),e._v(" "),s("section",[s("h3",[e._v("Equality & Relational: == != >= <= > <")]),e._v(" "),s("p",[e._v("Equality operators can be used to equate units, colors, strings, and even identifiers. This is a powerful concept, as even arbitrary identifiers (such as as "),s("code",[e._v("wahoo")]),e._v(") can be utilized as atoms. A function could return "),s("code",[e._v("yes")]),e._v(" or "),s("code",[e._v("no")]),e._v(" instead of "),s("code",[e._v("true")]),e._v(" or "),s("code",[e._v("false")]),e._v(" (although not advised).")]),e._v(" "),s("pre",[s("code",{staticClass:"my-stylus"},[e._v("\n      5 == 5\n      // => true\n      \n      10 > 5\n      // => true\n      \n      #fff == #fff\n      // => true\n      \n      true == false\n      // => false\n      \n      wahoo == yay\n      // => false\n      \n      wahoo == wahoo\n      // => true\n      \n      \"test\" == \"test\"\n      // => true\n      \n      true is true\n      // => true\n      \n      'hey' is not 'bye'\n      // => true\n      \n      'hey' isnt 'bye'\n      // => true\n      \n      (foo bar) == (foo bar)\n      // => true\n      \n      (1 2 3) == (1 2 3)\n      // => true\n      \n      (1 2 3) == (1 1 3)\n      // => false\n    ")])]),e._v(" "),s("p",[e._v("Only exact values match. For example, "),s("code",[e._v("0 == false")]),e._v(" and "),s("code",[e._v("null == false")]),e._v(" are both "),s("code",[e._v("false")]),e._v(".")]),e._v(" "),s("p",[e._v("Aliases:")]),e._v(" "),s("pre",[s("code",{staticClass:"my-stylus"},[e._v("\n      ==    is\n      !=    is not\n      !=    isnt\n    ")])])]),e._v(" "),s("section",[s("h3",[e._v("Truthfulness")]),e._v(" "),s("p",[e._v("Nearly everything within Stylus resolves to "),s("code",[e._v("true")]),e._v(", including units with a suffix. Even "),s("code",[e._v("0%")]),e._v(", "),s("code",[e._v("0px")]),e._v(", etc. will resolve to "),s("code",[e._v("true")]),e._v(" (because it's common in Stylus for mixins or functions to accept units as valid).")]),e._v(" "),s("p",[e._v("However, "),s("code",[e._v("0")]),e._v(" itself is "),s("code",[e._v("false")]),e._v(" in terms of arithmetic.")]),e._v(" "),s("p",[e._v('Expressions (or "lists") with a length greater than 1 are considered truthy.')]),e._v(" "),s("p",[s("code",[e._v("true")]),e._v(" examples:")]),e._v(" "),s("pre",[s("code",{staticClass:"my-stylus"},[e._v("\n      0% \n      0px\n      1px \n      -1\n      -1px\n      hey\n      'hey'\n      (0 0 0)\n      ('' '')\n    ")])]),e._v(" "),s("p",[s("code",[e._v("false")]),e._v(" examples:")]),e._v(" "),s("pre",[s("code",{staticClass:"my-stylus"},[e._v("\n      0 \n      null\n      false\n      ''\n    ")])])]),e._v(" "),s("section",[s("h3",[e._v("Logical Operators: && || and or")]),e._v(" "),s("p",[e._v("Logical operators "),s("code",[e._v("&&")]),e._v(" and "),s("code",[e._v("||")]),e._v(" are aliased "),s("code",[e._v("and")]),e._v(" / "),s("code",[e._v("or")]),e._v(" which apply the same precedence.")]),e._v(" "),s("pre",[s("code",{staticClass:"my-stylus"},[e._v("\n      5 && 3\n      // => 3\n      \n      0 || 5\n      // => 5\n      \n      0 && 5\n      // => 0\n      \n      #fff is a 'rgba' and 15 is a 'unit'\n      // => true\n    ")])])]),e._v(" "),s("section",[s("h3",[e._v("Existence Operator: in")]),e._v(" "),s("p",[e._v("Checks for the existence of the "),s("i",[e._v("left-hand")]),e._v(" operand within the "),s("i",[e._v("right-hand")]),e._v(" expression.")]),e._v(" "),s("p",[e._v("Simple examples:")]),e._v(" "),s("pre",[s("code",{staticClass:"my-stylus"},[e._v("\n      nums = 1 2 3\n      1 in nums\n      // => true\n    \n      5 in nums\n      // => false\n    ")])]),e._v(" "),s("p",[e._v("Some undefined identifiers:")]),e._v(" "),s("pre",[s("code",{staticClass:"my-stylus"},[e._v("\n      words = foo bar baz\n      bar in words\n      // => true\n    \n      HEY in words\n      // => false\n    ")])]),e._v(" "),s("p",[e._v("Works with tuples too:")]),e._v(" "),s("pre",[s("code",{staticClass:"my-stylus"},[e._v("\n      vals = (error 'one') (error 'two')\n      error in vals\n      // => false\n      \n      (error 'one') in vals\n      // => true\n    \n      (error 'two') in vals\n      // => true\n    \n      (error 'something') in vals\n      // => false\n    ")])]),e._v(" "),s("p",[e._v("Example usage in mixin:")]),e._v(" "),s("pre",[s("code",{staticClass:"my-stylus"},[e._v("\n      pad(types = padding, n = 5px)\n        if padding in types\n          padding n\n        if margin in types\n          margin n\n    \n      body\n        pad()\n    \n      body\n        pad(margin)\n    \n      body\n        pad(padding margin, 10px)\n    ")])]),e._v(" "),s("p",[e._v("Yielding:")]),e._v(" "),s("pre",[s("code",{staticClass:"my-css"},[e._v("\n      body {\n        padding: 5px;\n      }\n      body {\n        margin: 5px;\n      }\n      body {\n        padding: 10px;\n        margin: 10px;\n      }\n    ")])])]),e._v(" "),s("section",[s("h3",[e._v("Conditional Assignment: ?= :=")]),e._v(" "),s("p",[e._v("The conditional assignment operator "),s("code",[e._v("?=")]),e._v(" (aliased as "),s("code",[e._v(":=")]),e._v(") lets us define variables without clobbering old values (if present). This operator expands to an "),s("code",[e._v("is defined")]),e._v(" binary operation within a ternary.")]),e._v(" "),s("p",[e._v("For example, the following are equivalent:")]),e._v(" "),s("pre",[s("code",{staticClass:"my-stylus"},[e._v("\n      color := white\n      color ?= white\n      color = color is defined ? color : white\n    ")])]),e._v(" "),s("p",[e._v("When using plain "),s("code",[e._v("=")]),e._v(", we simply reassign:")]),e._v(" "),s("pre",[s("code",{staticClass:"my-stylus"},[e._v("\n      color = white\n      color = black\n    \n      color\n      // => black\n    ")])]),e._v(" "),s("p",[e._v("But when using "),s("code",[e._v("?=")]),e._v(", our second attempt fails (since the variable is already defined):")]),e._v(" "),s("pre",[s("code",{staticClass:"my-stylus"},[e._v("\n      color = white\n      color ?= black\n      \n      color\n      // => white\n    ")])])]),e._v(" "),s("section",[s("h3",[e._v("Instance Check: is a")]),e._v(" "),s("p",[e._v("Stylus provides a binary operator named "),s("code",[e._v("is a")]),e._v(" used to type check.")]),e._v(" "),s("pre",[s("code",{staticClass:"my-stylus"},[e._v("\n      15 is a 'unit'\n      // => true\n    \n      #fff is a 'rgba'\n      // => true\n      \n      15 is a 'rgba'\n      // => false\n    ")])]),e._v(" "),s("p",[e._v("Alternatively, we could use the "),s("code",[e._v("type()")]),e._v(" BIF:")]),e._v(" "),s("pre",[s("code",{staticClass:"my-stylus"},[e._v("\n      type(#fff) == 'rgba'\n      // => true                                                                            \n    ")])]),e._v(" "),s("p",[s("b",[e._v("Note:")]),e._v(" "),s("code",[e._v("color")]),e._v(" is the only special-case, evaluating to "),s("code",[e._v("true")]),e._v(" when the\n      left-hand operand is an "),s("code",[e._v("RGBA")]),e._v(" or "),s("code",[e._v("HSLA")]),e._v(" node.")])]),e._v(" "),s("section",[s("h3",[e._v("Variable Definition: is defined")]),e._v(" "),s("p",[e._v("This pseudo binary operator does not accept a right-hand operator, and does "),s("i",[e._v("not")]),e._v(" evaluate the left. This allows us to check if a variable has a value assigned to it.")]),e._v(" "),s("pre",[s("code",{staticClass:"my-stylus"},[e._v("\n      foo is defined\n      // => false\n      \n      foo = 15px\n      foo is defined\n      // => true\n      \n      #fff is defined\n      // => 'invalid \"is defined\" check on non-variable #fff'\n    ")])]),e._v(" "),s("p",[e._v("Alternatively, one can use the "),s("code",[e._v("lookup(name)")]),e._v(" built-in function to do this-or to perform dynamic lookups:")]),e._v(" "),s("pre",[s("code",{staticClass:"my-stylus"},[e._v("\n      name = 'blue'\n      lookup('light-' + name)\n      // => null\n      \n      light-blue = #80e2e9\n      lookup('light-' + name)\n      // => #80e2e9\n    ")])]),e._v(" "),s("p",[e._v("This operator is essential, as an undefined identifier is still a truthy value. For example:")]),e._v(" "),s("pre",[s("code",{staticClass:"my-stylus"},[e._v("\n      body\n        if ohnoes\n          padding 5px\n    ")])]),e._v(" "),s("p",[s("i",[e._v("Will")]),e._v(" yield the following CSS when undefined:")]),e._v(" "),s("pre",[s("code",{staticClass:"my-css"},[e._v("\n      body {\n        padding: 5px;\n      }\n    ")])]),e._v(" "),s("p",[e._v("However this will be safe:")]),e._v(" "),s("pre",[s("code",{staticClass:"my-stylus"},[e._v("\n      body\n        if ohnoes is defined\n          padding 5px\n    ")])])]),e._v(" "),s("section",[s("h3",[e._v("Ternary")]),e._v(" "),s("p",[e._v("The ternary operator works as we would expect in most languages. It's the only operator with three operands (the "),s("i",[e._v("condition")]),e._v(" expression, the "),s("i",[e._v("truth")]),e._v(" expression, and the "),s("i",[e._v("false")]),e._v(" expression).")]),e._v(" "),s("pre",[s("code",{staticClass:"my-stylus"},[e._v("\n      num = 15\n      num ? unit(num, 'px') : 20px\n      // => 15px\n    ")])])]),e._v(" "),s("section",[s("h3",[e._v("Casting")]),e._v(" "),s("p",[e._v("As an terse alternative to the "),s("code",[e._v("unit()")]),e._v(" built-in function, the syntax "),s("code",[e._v("(expr) unit")]),e._v(" may be used to force the suffix.")]),e._v(" "),s("pre",[s("code",{staticClass:"my-stylus"},[e._v("\n      body\n        n = 5\n        foo: (n)em\n        foo: (n)%\n        foo: (n + 5)%\n        foo: (n * 5)px\n        foo: unit(n + 5, '%')\n        foo: unit(5 + 180 / 2, deg)\n    ")])])]),e._v(" "),s("section",[s("h3",[e._v("Color Operations")]),e._v(" "),s("p",[e._v("Operations on colors provide a terse, expressive way to alter components. For example, we can operate on each RGB:")]),e._v(" "),s("pre",[s("code",{staticClass:"my-stylus"},[e._v("\n      #0e0 + #0e0\n      // => #0f0\n    ")])]),e._v(" "),s("p",[e._v("Another example is adjust the lightness value by adding or subtracting a percentage. To lighten a color, add; to darken, subtract.")]),e._v(" "),s("pre",[s("code",{staticClass:"my-stylus"},[e._v("\n      #888 + 50%\n      // => #c3c3c3\n    \n      #888 - 50%\n      // => #444\n    ")])]),e._v(" "),s("p",[e._v("Adjust the hue is also possible by adding or subtracting with degrees. For example, adding "),s("code",[e._v("50deg")]),e._v(" to this red value results in a yellow:")]),e._v(" "),s("pre",[s("code",{staticClass:"my-stylus"},[e._v("\n      #f00 + 50deg\n      // => #ffd500\n    ")])]),e._v(" "),s("p",[e._v('Values clamp appropriately. For example, we can "spin" the hue 180 degrees, and if the current value is '),s("code",[e._v("320deg")]),e._v(", it will resolve to "),s("code",[e._v("140deg")]),e._v(".")]),e._v(" "),s("p",[e._v("We may also tweak several values at once (including the alpha) by using "),s("code",[e._v("rgb()")]),e._v(", "),s("code",[e._v("rgba()")]),e._v(", "),s("code",[e._v("hsl()")]),e._v(", or "),s("code",[e._v("hsla()")]),e._v(":")]),e._v(" "),s("pre",[s("code",{staticClass:"my-stylus"},[e._v("\n      #f00 - rgba(100,0,0,0.5)\n      // => rgba(155,0,0,0.5)\n    ")])])]),e._v(" "),s("section",[s("h3",[e._v("Sprintf")]),e._v(" "),s("p",[e._v("The string sprintf-like operator "),s("code",[e._v("%")]),e._v(" can be used to generate a literal value, internally passing arguments through the "),s("code",[e._v("s()")]),e._v(" built-in:")]),e._v(" "),s("pre",[s("code",{staticClass:"my-stylus"},[e._v("\n      'X::Microsoft::Crap(%s)' % #fc0\n      // => X::Microsoft::Crap(#fc0)\n    ")])]),e._v(" "),s("p",[e._v("Multiple values should be parenthesized:")]),e._v(" "),s("pre",[s("code",{staticClass:"my-stylus"},[e._v("\n      '-webkit-gradient(%s, %s, %s)' % (linear (0 0) (0 100%))\n      // => -webkit-gradient(linear, 0 0, 0 100%)\n    ")])])])])}],!1,null,"74c363c3",null);o.options.__file="docs/web/stylus/Operators.vue";n.default=o.exports},63:function(e,n,s){var t=s(104);"string"==typeof t&&(t=[[e.i,t,""]]),t.locals&&(e.exports=t.locals);(0,s(14).default)("8b863752",t,!1,{})}}]);