(window.webpackJsonp=window.webpackJsonp||[]).push([[85],{120:function(e,t,s){"use strict";s.r(t);var n=function(){var e=this,t=e.$createElement,s=e._self._c||t;return s("section",[s("h3",[e._v("Index")]),e._v(" "),s("section",[s("h4",[e._v("Declarative Rendering")]),e._v(" "),e._m(0),e._v(" "),e._m(1),e._v(" "),e._m(2),e._v(" "),s("div",{staticClass:"my-demo"},[e._v("\n      "+e._s(e.message)+"\n    ")]),e._v(" "),e._m(3)]),e._v(" "),s("section",[s("h4",[e._v("Attribute Binding")]),e._v(" "),e._m(4),e._v(" "),s("div",{staticClass:"my-demo"},[s("span",{attrs:{title:e.msg}},[e._v("\n        Hover your mouse over me for a few seconds to see my dynamically bound title!\n      ")])]),e._v(" "),e._m(5)]),e._v(" "),s("section",[s("h4",[e._v("Conditionals")]),e._v(" "),e._m(6),e._v(" "),e._m(7),e._v(" "),e._m(8),e._v(" "),s("div",{staticClass:"my-demo"},[e.seen?s("span",[e._v("Now you see me "),s("input",{attrs:{type:"text"}})]):s("span",[e._v("Now you don't")]),e._v(" "),s("button",{on:{click:e.see}},[e._v("Magic")])])]),e._v(" "),s("section",[s("h4",[e._v("List")]),e._v(" "),e._m(9),e._v(" "),e._m(10),e._v(" "),e._m(11),e._v(" "),s("div",{staticClass:"my-demo"},[s("ol",e._l(e.todos,(function(t){return s("li",{key:t.io},[e._v("\n          "+e._s(t.text)+"\n        ")])})),0)])]),e._v(" "),s("section",[s("h4",[e._v("Handling User Input")]),e._v(" "),e._m(12),e._v(" "),e._m(13),e._v(" "),e._m(14),e._v(" "),s("div",{staticClass:"my-demo"},[s("span",[e._v(e._s(e.message))]),e._v(" "),s("button",{on:{click:e.reverseMessage}},[e._v("Reverse Message")])]),e._v(" "),s("p",[e._v("Note that in this method we update the state of our app without touching the DOM - all DOM manipulations are handled by Vue, and the code you write is focused on the underlying logic.")])]),e._v(" "),s("section",[s("h4",[e._v("v-model")]),e._v(" "),e._m(15),e._v(" "),e._m(16),e._v(" "),e._m(17),e._v(" "),s("div",{staticClass:"my-demo"},[s("input",{directives:[{name:"model",rawName:"v-model",value:e.message,expression:"message"}],domProps:{value:e.message},on:{input:function(t){t.target.composing||(e.message=t.target.value)}}}),e._v(" "),s("button",{on:{click:e.reverseMessage}},[e._v("Reverse Message")])])]),e._v(" "),s("section",[s("h4",[e._v("Composing with Components")]),e._v(" "),e._m(18),e._v(" "),s("p",[e._v("The component system is another important concept in Vue, because it's an abstraction that allows us to build large-scale applications composed of small, self-contained, and often reusable components. If we think about it, almost any type of application interface can be abstracted into a tree of components:")]),e._v(" "),s("p",[e._v("In Vue, a component is essentially a Vue instance with pre-defined options. Registering a component in Vue is straightforward:")]),e._v(" "),s("p",[e._v("Now you can compose it in another component's template:")]),e._v(" "),e._m(19),e._v(" "),e._m(20),e._v(" "),e._m(21),e._v(" "),e._m(22),e._v(" "),e._m(23),e._v(" "),e._m(24),e._v(" "),s("div",{staticClass:"my-demo"},[s("ol",e._l(e.groceryList,(function(e){return s("todo-item",{key:e.id,attrs:{todo:e}})})),1)]),e._v(" "),e._m(25)])])};n._withStripped=!0;var i={components:{TodoItem:function(){return s.e(4).then(s.bind(null,136))}},data:function(){return{message:"Hello Vue!",msg:"You loaded this page on ".concat((new Date).toLocaleString()),seen:!0,todos:[{text:"Learn JavaScript"},{text:"Learn Vue"},{text:"Build something awesome"}],groceryList:[{id:0,text:"Vegetables"},{id:1,text:"Cheese"},{id:2,text:"Whatever else humans are supposed to eat"}]}},methods:{see:function(){this.seen?this.seen=!1:this.seen=!0},reverseMessage:function(){this.message=this.message.split("").reverse().join("")}}},a=s(0),o=Object(a.a)(i,n,[function(){var e=this.$createElement,t=this._self._c||e;return t("p",[this._v("At the core of Vue.js is a system that enables us to "),t("b",[this._v("declaratively render data")]),this._v(" to the DOM using straightforward template syntax, That means you use a variable or literals in DOM and Vue will replace its value or use them according to responding value in Vue declaration:")])},function(){var e=this.$createElement,t=this._self._c||e;return t("pre",[t("code",{staticClass:"my-html"},[this._v('\n      <div id="app">\n      { message }\n      </div>\n      \n      <script>\n      export default {\n        props: {\n          todo: Object\n        },\n      }\n      <\/script>\n    ')])])},function(){var e=this.$createElement,t=this._self._c||e;return t("pre",[t("code",{staticClass:"my-js"},[this._v("\n      var app = new Vue({\n        data: {\n          message: 'Hello Vue!'\n        }\n      })\n    ")])])},function(){var e=this.$createElement,t=this._self._c||e;return t("p",[this._v("The data and the DOM are now linked, and everything is now "),t("b",[this._v("reactive")]),this._v(". How do we know? Set "),t("code",[this._v("app.message")]),this._v(" to a different value. You should see the rendered example above update accordingly.")])},function(){var e=this.$createElement,t=this._self._c||e;return t("pre",[t("code",{staticClass:"my-html"},[this._v('\n      <span :title="message">\n        Hover your mouse over me for a few seconds\n        to see my dynamically bound title!\n      </span>\n    ')])])},function(){var e=this,t=e.$createElement,s=e._self._c||t;return s("p",[e._v("Here we are encountering something new. The "),s("code",[s("a",{staticClass:"vue-api"},[e._v("v-bind")])]),e._v(" attribute you are seeing is called a "),s("a",{staticClass:"vue-api"},[e._v("Directive")]),e._v(". Directives are prefixed with "),s("code",[e._v("v-")]),e._v(" to indicate that they are special attributes provided by Vue, and as you may have guessed, they apply special reactive behavior to the rendered DOM. Here, it is basically saying \"keep this element's "),s("b",[e._v("HTML "),s("code",[e._v("title")]),e._v(" attribute")]),e._v(" up-to-date with the "),s("code",[e._v("message")]),e._v(" property which "),s("b",[e._v("define in data method")]),e._v(' on the Vue instance."')])},function(){var e=this.$createElement,t=this._self._c||e;return t("p",[this._v("This example demonstrates that we can bind data to not only text and attributes, but also the "),t("b",[this._v("structure")]),this._v(" of the DOM.")])},function(){var e=this.$createElement,t=this._self._c||e;return t("pre",[t("code",{staticClass:"my-html"},[this._v('\n      <span v-if="seen">Now you see me <input type="text"></span>\n      <span v-else>Now you don\'t</span>\n      <button @click="see"></button>\n    ')])])},function(){var e=this.$createElement,t=this._self._c||e;return t("pre",[t("code",{staticClass:"my-js"},[this._v("\n      data: {\n        seen: true\n      }, \n      methods: {\n        see() {\n          if (this.seen) this.seen = false\n          else this.seen = true\n        }\n      }\n    ")])])},function(){var e=this.$createElement,t=this._self._c||e;return t("p",[this._v("There are quite a few other directives, each with its own special functionality. For example, the "),t("code",[this._v("v-for")]),this._v(" directive can be used for displaying a list of items using the data from an Array:")])},function(){var e=this.$createElement,t=this._self._c||e;return t("pre",[t("code",{staticClass:"my-html"},[this._v('\n      <ol>\n        <li v-for="todo in todos">\n          { todo.text }\n        </li>\n      </ol>\n    ')])])},function(){var e=this.$createElement,t=this._self._c||e;return t("pre",[t("code",{staticClass:"my-js"},[this._v("\n      data: {\n        todos: [\n          { text: 'Learn JavaScript' },\n          { text: 'Learn Vue' },\n          { text: 'Build something awesome' }\n        ]\n      }\n    ")])])},function(){var e=this.$createElement,t=this._self._c||e;return t("p",[this._v("To let users interact with your app, we can use the "),t("code",[this._v("v-on")]),this._v(" directive to attach event listeners that invoke methods on our Vue instances:")])},function(){var e=this.$createElement,t=this._self._c||e;return t("pre",[t("code",{staticClass:"my-html"},[this._v('\n      <span>{ message }</span>\n      <button @click="reverseMessage">Reverse Message</button>\n    ')])])},function(){var e=this.$createElement,t=this._self._c||e;return t("pre",[t("code",{staticClass:"my-js"},[this._v("\n      data: {\n        message: 'Hello Vue!'\n      },\n      methods: {\n        reverseMessage() {\n          this.message = this.message.split('').reverse().join('')\n        }\n      }\n    ")])])},function(){var e=this.$createElement,t=this._self._c||e;return t("p",[this._v("Vue also provides the "),t("code",[this._v("v-model")]),this._v(" directive that makes two-way binding between form input and app state a breeze:")])},function(){var e=this.$createElement,t=this._self._c||e;return t("pre",[t("code",{staticClass:"my-html"},[this._v('\n      <input v-model="message">\n      <button @click="reverseMessage">Reverse Message</button>\n    ')])])},function(){var e=this.$createElement,t=this._self._c||e;return t("pre",[t("code",{staticClass:"my-js"},[this._v("\n      data: {\n        message: 'Hello Vue!'\n      },\n      methods: {\n        reverseMessage() {\n          this.message = this.message.split('').reverse().join('')\n        }\n      }\n    ")])])},function(){var e=this.$createElement,t=this._self._c||e;return t("div",{staticClass:"scrimba"},[t("a",{attrs:{href:"https://scrimba.com/p/pXKqta/cEQVkA3"}},[this._v("Try this lesson on Scrimba")])])},function(){var e=this.$createElement,t=this._self._c||e;return t("pre",[t("code",{staticClass:"my-html"},[this._v("\n      <ol>\n        \x3c!-- Create an instance of the todo-item component --\x3e\n        <todo-item></todo-item>\n      </ol>\n    ")])])},function(){var e=this.$createElement,t=this._self._c||e;return t("p",[this._v("But this would render the same text for every todo, which is not super interesting. We should be able to pass data from the parent scope into child components. Let's modify the component definition to make it accept a "),t("b",[this._v("prop")]),this._v(":")])},function(){var e=this.$createElement,t=this._self._c||e;return t("pre",[t("code",{staticClass:"my-html"},[this._v("\n      <template>\n        <li>{ todo.text }</li>\n      </template>\n      <script>\n      export default {\n        props: {\n          todo: Object\n        },\n      }\n      <\/script>\n    ")])])},function(){var e=this.$createElement,t=this._self._c||e;return t("p",[this._v("Now we can pass the todo into each repeated component using "),t("code",[this._v("v-bind")]),this._v(":")])},function(){var e=this.$createElement,t=this._self._c||e;return t("pre",[t("code",{staticClass:"my-html"},[this._v('\n      <ol>\n        <todo-item\n          v-for="item in groceryList"\n          :todo="item"\n          :key="item.id"\n        ></todo-item>\n      </ol>\n    ')])])},function(){var e=this.$createElement,t=this._self._c||e;return t("pre",[t("code",{staticClass:"my-js"},[this._v("\n      data: {\n        groceryList: [\n          { id: 0, text: 'Vegetables' },\n          { id: 1, text: 'Cheese' },\n          { id: 2, text: 'Whatever else humans are supposed to eat' }\n        ]\n      }\n    ")])])},function(){var e=this.$createElement,t=this._self._c||e;return t("p",[this._v("This is a contrived example, but we have managed to separate our app into two smaller units, and the child is reasonably well-decoupled from the parent via the props interface. We can now further improve our "),t("code",[this._v("<todo-item>")]),this._v(" component with more complex template and logic without affecting the parent app.")])}],!1,null,null,null);o.options.__file="docs/web/vue/guide/Introduction.vue";t.default=o.exports}}]);