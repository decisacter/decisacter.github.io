(window.webpackJsonp=window.webpackJsonp||[]).push([[90],{122:function(e,t,i){"use strict";i.r(t);var s=function(){var e=this,t=e.$createElement,i=e._self._c||t;return i("section",[i("h3",[e._v("Syntax")]),e._v(" "),i("section",[i("h4",[e._v("Interpolations")]),e._v(" "),e._m(0),e._v(" "),e._m(1),e._v(" "),i("section",[i("h5",[e._v("Raw HTML")]),e._v(" "),e._m(2),e._v(" "),e._m(3),e._v(" "),e._m(4),e._v(" "),i("div",{staticClass:"my-demo"},[i("p",[e._v("Using v-html directive: "),i("span",{domProps:{innerHTML:e._s(e.rawHtml)}})])]),e._v(" "),e._m(5)]),e._v(" "),i("section",[i("h5",[e._v("Attributes")]),e._v(" "),e._m(6),e._v(" "),e._m(7),e._v(" "),e._m(8),e._v(" "),i("div",{staticClass:"my-demo"},[i("div",{attrs:{title:e.dynamicTitle}},[e._v("dynamic title")])]),e._v(" "),e._m(9),e._v(" "),e._m(10),e._v(" "),e._m(11),e._v(" "),i("div",{staticClass:"my-demo"},[i("button",{attrs:{disabled:e.isButtonDisabled}},[e._v("Button")])]),e._v(" "),e._m(12)])]),e._v(" "),i("section",[i("h4",[e._v("Directives")]),e._v(" "),e._m(13),e._v(" "),e._m(14),e._v(" "),e._m(15),e._v(" "),e._m(16),e._v(" "),i("section",[i("h5",[e._v("Dynamic Arguments")]),e._v(" "),i("p",[e._v("it is also possible to use a JavaScript expression in a directive argument by wrapping it with square brackets:")]),e._v(" "),e._m(17),e._v(" "),e._m(18),e._v(" "),i("p",[e._v("Similarly, you can use dynamic arguments to bind a handler to a dynamic event name:")]),e._v(" "),e._m(19),e._v(" "),e._m(20),e._v(" "),i("section",[i("h6",[e._v("Dynamic Argument Expression Constraints")]),e._v(" "),e._m(21),e._v(" "),i("p",[e._v("Dynamic argument expressions have some syntax constraints because certain characters, such as spaces and quotes, are invalid inside HTML attribute names. For example, the following is invalid:")]),e._v(" "),e._m(22),e._v(" "),e._m(23),e._v(" "),i("div",{staticClass:"my-demo"},[i("a",e._b({},"a",e._d({},["titl"+e.bar,e.value])),[e._v(" dynamic attribute")])]),e._v(" "),i("p",[e._v("The workaround is to either use expressions without spaces or quotes, or replace the complex expression with a computed property.")]),e._v(" "),i("p",[e._v("When using in-DOM templates (templates directly written in an HTML file), you should also avoid naming keys with uppercase characters, as browsers will coerce attribute names into lowercase:")]),e._v(" "),e._m(24)])]),e._v(" "),e._m(25)])])};s._withStripped=!0;var n={data:function(){return{rawHtml:"<b>This should be highlighted.</b>",attribute:"title",dynamicTitle:"dynamic",isButtonDisabled:!0,bar:"e",value:"foobar"}}},a=i(0),r=Object(a.a)(n,s,[function(){var e=this.$createElement,t=this._self._c||e;return t("p",[this._v("These expressions enclose in double curly brace or Vue directive attribute value will be evaluated as JavaScript in the data scope of the owner Vue instance. One restriction is that each binding can only contain "),t("b",[this._v("one single expression")]),this._v(".")])},function(){var e=this.$createElement,t=this._self._c||e;return t("section",[t("h5",[this._v("Text")]),this._v(" "),t("p",[this._v('The most basic form of data binding is text interpolation using the "Mustache" syntax (double curly braces). Since the code reside in double curly braces will be evaluated as JavaScript expression. The mustache tag will be replaced with the value of the '),t("code",[this._v("msg")]),this._v(" property on the corresponding data object. It will also be updated whenever the data object's "),t("code",[this._v("msg")]),this._v(" property changes.")])])},function(){var e=this.$createElement,t=this._self._c||e;return t("p",[this._v("The double mustaches interprets the data as plain text, not HTML. In order to output real HTML, you will need to use the "),t("a",{staticClass:"vue-api"},[t("code",[this._v("v-html")]),this._v(" directive")]),this._v(":")])},function(){var e=this.$createElement,t=this._self._c||e;return t("pre",[t("code",{staticClass:"my-html"},[this._v('\n        <p>Using v-html directive: <span v-html="rawHtml"></span></p>\n      ')])])},function(){var e=this.$createElement,t=this._self._c||e;return t("pre",[t("code",{staticClass:"my-js"},[this._v("\n        data: {\n          rawHtml: '<b>This should be highlighted</b>'\n        }\n      ")])])},function(){var e=this.$createElement,t=this._self._c||e;return t("p",[this._v("The contents of the "),t("code",[this._v("span")]),this._v(" will be replaced with the value of the "),t("code",[this._v("rawHtml")]),this._v(" property, interpreted as plain HTML - data bindings are ignored. Note that you cannot use "),t("code",[this._v("v-html")]),this._v(" to compose template partials, because Vue is not a string-based templating engine. Instead, components are preferred as the fundamental unit for UI reuse and composition.")])},function(){var e=this.$createElement,t=this._self._c||e;return t("p",[this._v("Mustaches cannot be used inside HTML attributes. Instead, use a "),t("a",{staticClass:"vue-api"},[t("code",[this._v("v-bind")]),this._v(" directive")]),this._v(" before attribute name and its attribute value will be evaluated as JavaScript expression")])},function(){var e=this.$createElement,t=this._self._c||e;return t("pre",[t("code",{staticClass:"my-html"},[this._v('\n        <div :title="dynamicTitle"></div>\n      ')])])},function(){var e=this.$createElement,t=this._self._c||e;return t("pre",[t("code",{staticClass:"my-js"},[this._v("\n        data: {\n          dynamicTitle: 'dynamic'\n        }\n      ")])])},function(){var e=this.$createElement,t=this._self._c||e;return t("p",[this._v("In the case of boolean attributes, where their mere existence implies "),t("code",[this._v("true")]),this._v(", "),t("code",[this._v("v-bind")]),this._v(" works a little differently. In this example:")])},function(){var e=this.$createElement,t=this._self._c||e;return t("pre",[t("code",{staticClass:"my-html"},[this._v('\n        <button :disabled="isButtonDisabled">Button</button>\n      ')])])},function(){var e=this.$createElement,t=this._self._c||e;return t("pre",[t("code",{staticClass:"my-js"},[this._v("\n        data: {\n          isButtonDisabled: true\n        }\n      ")])])},function(){var e=this,t=e.$createElement,i=e._self._c||t;return i("p",[e._v("If "),i("code",[e._v("isButtonDisabled")]),e._v(" has the value of "),i("code",[e._v("null")]),e._v(", "),i("code",[e._v("undefined")]),e._v(", or "),i("code",[e._v("false")]),e._v(", the "),i("code",[e._v("disabled")]),e._v(" attribute will not even be included in the rendered "),i("code",[e._v("<button>")]),e._v(" element.")])},function(){var e=this.$createElement,t=this._self._c||e;return t("p",[this._v("Directives are special attributes with the "),t("code",[this._v("v-")]),this._v(" prefix. Directive attribute values are expected to be "),t("b",[this._v("a single JavaScript expression")]),this._v(" (with the exception of "),t("code",[this._v("v-for")]),this._v(", which will be discussed later). A directive's job is to reactively apply side effects to the DOM when the value of its expression changes.")])},function(){var e=this.$createElement,t=this._self._c||e;return t("pre",[t("code",{staticClass:"my-html"},[this._v('\n      <p v-if="seen">Now you see me</p>\n    ')])])},function(){var e=this.$createElement,t=this._self._c||e;return t("p",[this._v("Here, the "),t("code",[this._v("v-if")]),this._v(" directive would remove/insert the "),t("code",[this._v("<p>")]),this._v(" element based on the truthiness of the value of the expression "),t("code",[this._v("seen")]),this._v(".")])},function(){var e=this,t=e.$createElement,i=e._self._c||t;return i("section",[i("h5",[e._v("Arguments")]),e._v(" "),i("p",[e._v('Some directives can take an "argument", denoted by a colon after the directive name. For example, the '),i("code",[e._v("v-bind")]),e._v(" directive is used to reactively update an HTML attribute:")]),e._v(" "),i("pre",[i("code",{staticClass:"my-html"},[e._v('\n        <a :href="url"> ... </a>\n      ')])]),e._v(" "),i("p",[e._v("Here "),i("code",[e._v("href")]),e._v(" is the argument, which tells the "),i("code",[e._v("v-bind")]),e._v(" directive to bind the element's "),i("code",[e._v("href")]),e._v(" attribute to the value of the expression "),i("code",[e._v("url")]),e._v(".")]),e._v(" "),i("p",[e._v("Another example is the "),i("code",[e._v("v-on")]),e._v(" directive, which listens to DOM events. Here the argument is the event name to listen to:")]),e._v(" "),i("pre",[i("code",{staticClass:"my-html"},[e._v('\n        <a @click="doSomething"> ... </a>\n      ')])])])},function(){var e=this.$createElement,t=this._self._c||e;return t("pre",[t("code",{staticClass:"my-html"},[this._v('\n        \x3c!--\n        Note that there are some constraints to the argument expression, as explained\n        in the "Dynamic Argument Expression Constraints" section below.\n        --\x3e\n        <a :[attribute]="url"> ... </a>\n      ')])])},function(){var e=this,t=e.$createElement,i=e._self._c||t;return i("p",[e._v("Here "),i("code",[e._v("attribute")]),e._v(" will be dynamically evaluated as a JavaScript expression, and its evaluated value will be used as the final value for the argument. For example, if your Vue instance has a data property, "),i("code",[e._v("attribute")]),e._v(", whose value is "),i("code",[e._v('"href"')]),e._v(", then this binding will be equivalent to "),i("code",[e._v("v-bind:href")]),e._v(".")])},function(){var e=this.$createElement,t=this._self._c||e;return t("pre",[t("code",{staticClass:"my-html"},[this._v('\n        <a @[event]="doSomething"> ... </a>\n      ')])])},function(){var e=this,t=e.$createElement,i=e._self._c||t;return i("p",[e._v("In this example, when "),i("code",[e._v("eventName")]),e._v("'s value is "),i("code",[e._v('"focus"')]),e._v(", "),i("code",[e._v("v-on:[eventName]")]),e._v(" will be equivalent to "),i("code",[e._v("v-on:focus")]),e._v(".")])},function(){var e=this.$createElement,t=this._self._c||e;return t("p",[this._v("Dynamic arguments are expected to evaluate to a string, with the exception of "),t("code",[this._v("null")]),this._v(". The special value "),t("code",[this._v("null")]),this._v(" can be used to explicitly remove the binding. Any other non-string value will trigger a warning.")])},function(){var e=this.$createElement,t=this._self._c||e;return t("pre",[t("code",{staticClass:"my-html"},[this._v("\n          \x3c!-- This will trigger a compiler warning. --\x3e\n          <a :['titl' + bar]=\"value\"> ... </a>\n        ")])])},function(){var e=this.$createElement,t=this._self._c||e;return t("pre",[t("code",{staticClass:"my-js"},[this._v("\n          data() {\n            bar: 'e',\n            value: 'foobar'\n          }\n        ")])])},function(){var e=this.$createElement,t=this._self._c||e;return t("pre",[t("code",{staticClass:"my-html"},[this._v('\n          \x3c!--\n          This will be converted to :[someattr] in in-DOM templates.\n          Unless you have a "someattr" property in your instance, your code won\'t work.\n          --\x3e\n          <a :[someAttr]="value"> ... </a>\n        ')])])},function(){var e=this,t=e.$createElement,i=e._self._c||t;return i("section",[i("h5",[e._v("Modifiers")]),e._v(" "),i("p",[e._v("Modifiers are special postfixes denoted by a dot, which indicate that a directive should be bound in some special way. For example, the "),i("code",[e._v(".prevent")]),e._v(" modifier tells the "),i("code",[e._v("v-on")]),e._v(" directive to call "),i("code",[e._v("event.preventDefault()")]),e._v(" on the triggered event:")]),e._v(" "),i("pre",[i("code",{staticClass:"my-html"},[e._v('\n        <form @submit.prevent="onSubmit"> ... </form>\n      ')])])])}],!1,null,null,null);r.options.__file="docs/web/vue/guide/Syntax.vue";t.default=r.exports}}]);