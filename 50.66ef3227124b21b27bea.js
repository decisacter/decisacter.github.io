(window.webpackJsonp=window.webpackJsonp||[]).push([[50],{163:function(n,e,s){"use strict";s.r(e);var o=function(){var n=this.$createElement;this._self._c;return this._m(0)};o._withStripped=!0;var t=s(0),i=Object(t.a)({},o,[function(){var n=this,e=n.$createElement,s=n._self._c||e;return s("section",[s("h1",[n._v("Iteration")]),n._v(" "),s("p",[n._v("Stylus allows you to iterate expressions via the "),s("code",[n._v("for/in")]),n._v(" construct, taking the form of:")]),n._v(" "),s("pre",[s("code",{staticClass:"my-stylus"},[n._v("\n    for <val-name> [, <key-name>] in <expression>\n  ")])]),n._v(" "),s("p",[n._v("For example:")]),n._v(" "),s("pre",[s("code",{staticClass:"my-stylus"},[n._v("\n    body\n      for num in 1 2 3\n        foo num\n  ")])]),n._v(" "),s("p",[n._v("Yields:")]),n._v(" "),s("pre",[s("code",{staticClass:"my-stylus"},[n._v("\n    body {\n      foo: 1;\n      foo: 2;\n      foo: 3;\n    }\n  ")])]),n._v(" "),s("p",[n._v("The example below shows how to use the "),s("code",[n._v("<key-name>")]),n._v(":")]),n._v(" "),s("pre",[s("code",{staticClass:"my-stylus"},[n._v("\n    body\n      fonts = Impact Arial sans-serif\n      for font, i in fonts\n        foo i font\n  ")])]),n._v(" "),s("p",[n._v("Yielding:")]),n._v(" "),s("pre",[s("code",{staticClass:"my-stylus"},[n._v("\n    body {\n      foo: 0 Impact;\n      foo: 1 Arial;\n      foo: 2 sans-serif;\n    }\n  ")])]),n._v(" "),s("p",[n._v("And here's how you do a regular for loop")]),n._v(" "),s("pre",[s("code",{staticClass:"my-stylus"},[n._v("\n    body\n      for num in (1..5)\n        foo num\n  ")])]),n._v(" "),s("p",[n._v("Yields:")]),n._v(" "),s("pre",[s("code",{staticClass:"my-stylus"},[n._v("\n    body {\n      foo: 1;\n      foo: 2;\n      foo: 3;\n      foo: 4;\n      foo: 5;\n    }\n  ")])]),n._v(" "),s("section",[s("h2",[n._v("Mixins")]),n._v(" "),s("p",[n._v("We can use iteration within mixins to produce powerful functionality. For example, we can apply expression pairs as properties using interpolation and iteration.")]),n._v(" "),s("p",[n._v("Below we define "),s("code",[n._v("apply()")]),n._v(", conditionally utilizing all the "),s("code",[n._v("arguments")]),n._v(" so that comma-delimited "),s("i",[n._v("and")]),n._v(" expression lists are supported:")]),n._v(" "),s("pre",[s("code",{staticClass:"my-stylus"},[n._v("\n      apply(props)\n        props = arguments if length(arguments) > 1\n        for prop in props\n          {prop[0]} prop[1]\n    \n      body\n        apply(one 1, two 2, three 3)\n    \n      body\n        list = (one 1) (two 2) (three 3)\n        apply(list)\n    ")])])]),n._v(" "),s("section",[s("h2",[n._v("Functions")]),n._v(" "),s("p",[n._v("Stylus functions may also contain for-loops. Below are some example use-cases:")]),n._v(" "),s("p",[n._v("Sum:")]),n._v(" "),s("pre",[s("code",{staticClass:"my-stylus"},[n._v("\n      sum(nums)\n        sum = 0\n        for n in nums\n          sum += n\n    \n      sum(1 2 3)\n      // => 6\n    ")])]),n._v(" "),s("p",[n._v("join:")]),n._v(" "),s("pre",[s("code",{staticClass:"my-stylus"},[n._v("\n      join(delim, args)\n        buf = ''\n        for arg, index in args\n          if index\n            buf += delim + arg\n          else\n            buf += arg\n    \n      join(', ', foo bar baz)\n      // => \"foo, bar, baz\"\n    ")])])]),n._v(" "),s("section",[s("h2",[n._v("Postfix")]),n._v(" "),s("p",[n._v("Much like "),s("code",[n._v("if")]),n._v(" / "),s("code",[n._v("unless")]),n._v(" may be utilized post-statement, the same can be done with "),s("code",[n._v("for")]),n._v(". Below are the same examples as above utilizing the postfix syntax:")]),n._v(" "),s("pre",[s("code",{staticClass:"my-stylus"},[n._v("\n      sum(nums)\n        sum = 0\n        sum += n for n in nums\n  \n  \n      join(delim, args)\n        buf = ''\n        buf += i ? delim + arg : arg for arg, i in args\n    ")])]),n._v(" "),s("p",[n._v("We can also "),s("b",[n._v("return")]),n._v(" from within a loop, below is an example returning the\n      number when "),s("code",[n._v("n % 2 == 0")]),n._v(" evaluates to "),s("b",[n._v("true")]),n._v(".")]),n._v(" "),s("pre",[s("code",{staticClass:"my-stylus"},[n._v("\n      first-even(nums)\n        return n if n % 2 == 0 for n in nums\n    \n      first-even(1 3 5 5 6 3 2)\n      // => 6\n    ")])])])])}],!1,null,null,null);i.options.__file="docs/web/stylus/Iteration.vue";e.default=i.exports}}]);